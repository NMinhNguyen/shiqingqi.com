#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shiqingqi.com:server');
var spdy = require('spdy');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var wport = normalizePort(process.env.WPORT || '8080');
app.set('port', port);
console.log('Using port: ' + port + ' and ' + wport);

/**
 * Set certificate file.
 */

var keyFile = '';
var certFile = '';
if (process.env.PORT) {
    keyFile = '/etc/letsencrypt/live/shiqingqi.com/privkey.pem';
    certFile = '/etc/letsencrypt/live/shiqingqi.com/fullchain.pem';
} else {
    keyFile = __dirname + '/../../privkey.pem';
    certFile = __dirname + '/../../fullchain.pem';
}

/**
 * Create HTTPS server.
 */

var options = {
    key: fs.readFileSync(keyFile),
    cert: fs.readFileSync(certFile),
};
// var server = http.createServer(app);
var server = spdy.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var express = require('express');
var http = express();

http.get('*', function(req, res){
  res.redirect('https://' + req.headers['host'] + req.url)
});

http.listen(wport);
